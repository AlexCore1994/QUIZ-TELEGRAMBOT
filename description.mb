Описание команд и функций  бота

1. Команда /start
   - Описание: При вводе команды /start бот отправляет приветственное сообщение, предлагающее начать квиз. Сообщение также содержит кнопку "Начать квиз".
   - Функция: cmd_start(message: types.Message)
   - Необходимые данные: Сообщение от пользователя.
   - Ответ: Приветственное сообщение и кнопка для начала квиза.

2. Кнопка "Начать квиз"
   - Описание: Если пользователь нажимает на кнопку "Начать квиз", бот инициализирует квиз, сбрасывая начальные параметры для пользователя, и сообщает, что квиз начинается.
   - Функция: start_quiz(callback: types.CallbackQuery)
   - Необходимые данные: Данные обратного вызова от кнопки.
   - Ответ: сообщение о начале квиза и вызов вопроса.

3. Правильный ответ
   - Описание: Если пользователь отвечал верно на вопрос, бот увеличивает счетчик правильных ответов и отправляет сообщение, что ответ верный. Затем бот переходит к следующему вопросу.
   - Функция: right_answer(callback: types.CallbackQuery)
   - Необходимые данные: Данные обратного вызова от кнопки "Верно".
   - Ответ: сообщение о правильном ответе и вызов следующего вопроса.

4. Неправильный ответ
   - Описание: Если пользователь отвечает неправильно на вопрос, бот увеличивает счетчик неправильных ответов и отправляет сообщение о неправильном ответе. Затем бот переходит к следующему вопросу.
   - Функция: wrong_answer(callback: types.CallbackQuery)
   - Необходимые данные: Данные обратного вызова от кнопки "Неправильно".
   - Ответ: сообщение о неправильном ответе и вызов следующего вопроса.

5. Переход к следующему вопросу
   - Описание: Эта функция отвечает за логику перехода к следующему вопросу. После того, как ответ на текущий вопрос обработан, функция проверяет, есть ли еще вопросы в квизе.
   - Функция: proceed_to_next_question(callback: types.CallbackQuery)
   - Необходимые данные: Данные обратного вызова.
   - Ответ: Следующий вопрос или сообщение о завершении квиза.

6. Получение вопроса
   - Описание: Эта функция отвечает за получение текущего вопроса из набора вопросов и отправляет его пользователю. Если вопросы закончились, бот уведомляет об этом.
   - Функция: get_question(message: types.Message, user_id: int)
   - Необходимые данные: Сообщение от пользователя и пользовательский идентификатор.
   - Ответ: Указание на текущий вопрос или сообщение о том, что вопросов больше нет.

### Примечание

- В коде также есть структуры данных для хранения индексов текущих вопросов и счетов пользователей (user_quiz_indices и user_scores), что позволяет отслеживать прогресс игроков во время квиза.
- В случае завершения квиза, бот предлагает пользователю начать квиз заново.